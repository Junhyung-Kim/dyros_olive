MatrixXd RobotCtrl::GetCterm(VectorXd q, VectorXd qdot)
{
   double h = 2e-11;

   VectorXd q_new = q;
   MatrixXd C(dof_, dof_);
   MatrixXd C1(dof_, dof_);
   C1.setZero();
   MatrixXd C2(dof_, dof_);
   C2.setZero();
   MatrixXd H_origin(dof_, dof_), H_new(dof_, dof_);
   MatrixXd m[dof_];
   double b[dof_][dof_][dof_];
   CompositeRigidBodyAlgorithm(*model, q, H_origin, true);

   for (int i = 0; i < dof_; i++) {
      q_new = q;
      q_new(i) += h;
      CompositeRigidBodyAlgorithm(*model, q_new, H_new, true);
      m[i].resize(dof_, dof_);
      m[i] = (H_new - H_origin) / h;
   }

   for (int i = 0; i < dof_; i++)
      for (int j = 0; j < dof_; j++)
         for (int k = 0; k < dof_; k++)
            b[i][j][k] = 0.5 * (m[k](i, j) + m[j](i, k) - m[i](j, k));

   C.setZero();
   for (int i = 0; i < dof_; i++)
      for (int j = 0; j < dof_; j++)
         C1(i, j) = b[i][j][j] * qdot(j);

   for (int k = 0; k< dof_; k++)
      for (int j = 0; j<dof_; j++)
         for (int i = 1+j; i< dof_; i++)
            C2(k, j) += 2.0*b[k][j][i] * qdot(i);
   
   C = C1 + C2;

   return C;
}
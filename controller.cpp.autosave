#include "controller.h"
//#include <iomanip>


#define dof 2

void ArmController::compute()
{
  //get joint value in 2D
   for(int i=0; i<dof; ++i){
    q2D_(i) = q_(i);
    q2Ddot_(i) = qdot_(i);
    q2Dext_(i) = qext_(i);
  }

   //control initialize
   if(initialize_control == false){
     q2D_pre = q2D_;
     q2Dext_pre = q2Dext_;
     q2Ddot_pre.setZero();
     q2Ddotext_pre.setZero();

     initialize_control = true;
   }

  //calculate vel,acc
  q2Dddot_ = (q2Ddot_ - q2Ddot_pre)/0.001;
  q2Ddotext_ = (q2Dext_ - q2Dext_pre)/0.001;
  q2Dddotext_ = (q2Ddotext_ - q2Ddotext_pre)/0.001;
  //filtering
  for(int i=0; i<dof; ++i){
  q2Dddot_f(i) = lowpassfilter(0.001,100.0,q2Dddot_(i),q2Dddot_f_pre(i));
  q2Ddotext_f(i) = lowpassfilter(0.001,600.0,q2Ddotext_(i),q2Ddotext_f_pre(i));
  q2Dddotext_f(i) = lowpassfilter(0.001,600.0,q2Dddotext_(i),q2Dddotext_f_pre(i));
  }
  q2Dddot_f_pre = q2Dddot_f;
  q2Ddotext_f_pre = q2Ddotext_f;
  q2Dddotext_f_pre = q2Dddotext_f;

  //get dynamics and jac
  A = getA(q2D_);
  J = getJ(q2D_);
  C = getC(q2D_,q2Ddot_);
  C_T = C.transpose();
cout << C << endl<<endl;

  errorcheck2D = (q2D_-q2Dext_)*RAD2DEG;

  //control after 4 seconds
    if (play_time_ == 6.0){
      control_start_time_ = play_time_;
      torque_desired_.setZero();
      q2D_init_(0) = q2D_(0);
      q2D_init_(1) = q2D_(1);
      q2D_target(0) = q2D_init_(0) + 30.0*DEG2RAD;
      q2D_target(1) = q2D_init_(1) + 30.0*DEG2RAD;
      control_time_ = 1.0;
    }
    else if(play_time_>6.0){
    }
    else if(play_time_ < 4.0){
      control_start_time_ = play_time_;
      torque_desired_.setZero();
      q2D_init_(0) = q2D_(0);
      q2D_init_(1) = q2D_(1);
      q2D_target(0) = 10.0*DEG2RAD;
      q2D_target(1) = 10.0*DEG2RAD;
    }

    //control trajectory
    if(play_time_ < 6.0 && play_time_ >= 4.0){
      q2D_desired_(0) = DyrosMath::cubic(play_time_, control_start_time_ , control_start_time_ + 1.0, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2D_desired_(1) = DyrosMath::cubic(play_time_, control_start_time_ , control_start_time_ + 1.0, q2D_init_(1), q2D_target(1), 0.0, 0.0);
      q2Ddot_desired_(0) = DyrosMath::cubicDot(play_time_, control_start_time_, control_start_time_ + 1.0, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2Ddot_desired_(1) = DyrosMath::cubicDot(play_time_, control_start_time_, control_start_time_ + 1.0, q2D_init_(1), q2D_target(1), 0.0, 0.0);
      q2Dddot_desired_(0) = DyrosMath::cubicDDot(play_time_, control_start_time_, control_start_time_ + 1.0, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2Dddot_desired_(1) = DyrosMath::cubicDDot(play_time_, control_start_time_, control_start_time_ + 1.0, q2D_init_(1), q2D_target(1), 0.0, 0.0);
    }
    else if(play_time_ >= 6.0){
      q2D_desired_(0) = DyrosMath::cubic(play_time_, control_start_time_ , control_start_time_ + control_time_, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2D_desired_(1) = DyrosMath::cubic(play_time_, control_start_time_ , control_start_time_ + control_time_, q2D_init_(1), q2D_target(1), 0.0, 0.0);
      q2Ddot_desired_(0) = DyrosMath::cubicDot(play_time_, control_start_time_, control_start_time_ + control_time_, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2Ddot_desired_(1) = DyrosMath::cubicDot(play_time_, control_start_time_, control_start_time_ + control_time_, q2D_init_(1), q2D_target(1), 0.0, 0.0);
      q2Dddot_desired_(0) = DyrosMath::cubicDDot(play_time_, control_start_time_, control_start_time_ + control_time_, q2D_init_(0), q2D_target(0), 0.0, 0.0);
      q2Dddot_desired_(1) = DyrosMath::cubicDDot(play_time_, control_start_time_, control_start_time_ + control_time_, q2D_init_(1), q2D_target(1), 0.0, 0.0);
    }
    else{
      q2D_desired_(0) = q2D_init_(0);
      q2D_desired_(1) = q2D_init_(1);
    }

    if(play_time_ >= 4.0){
      //controller
      torque2D_desired_ = Kp*(q2D_desired_-q2D_) + Kv*(q2Ddot_desired_-q2Ddot_);

      torque_desired_(0) = torque2D_desired_(0);
      torque_desired_(1) = torque2D_desired_(1);
      torque_desired_(2) = 0.0;
    }
    else{
      torque_desired_.setZero();
    }
    Gamma_L_est_ = A*q2Dddot_f;
    //q2Dddot_desired_ = A*q2Dddot_desired_;

    //momentum observer
    momentum_ = A*q2Ddot_;
    momentum_dot_est_ = torque2D_desired_ + C_T*q2Ddot_ + torque2D_dist_est - torque2D_Gravity - torque2D_fric_est;
    momentum_est_ =  momentum_est_ + momentum_dot_est_*0.001;
    torque2D_dist_est = Lgain_*(momentum_ - momentum_est_);
    //filtering
    for(int i=0; i<dof; ++i){
    torque2D_dist_est_f(i) = lowpassfilter(0.001,100.0,torque2D_dist_est(i),torque2D_dist_est_f_pre(i));
    }
    torque2D_dist_est_f_pre = torque2D_dist_est_f;
    //force_ext_est_ = _L_J_T_inv*_torque_ext_est;

    //pre value save
    q2D_pre = q2D_;
    q2Ddot_pre = q2Ddot_;
    q2Dddot_pre = q2Dddot_;
    q2Dext_pre = q2Dext_;
    q2Ddotext_pre = q2Ddotext_;
    q2Dddotext_pre = q2Dddotext_;
}

MatrixXd ArmController::getA(Vector2d q){
  MatrixXd Amat;
  Amat.resize(2,2);
  double m1 = 8.19054356366;
  //double m2 = 7.63361475695; //no bar
  double m2 = 9.92016314806; //only bar
  //double m2 = 19.92016314806; //add 10kg
  //double m2 = 29.92016314806; //add 20kg
  double l1 = 0.3;
  double l2 = 0.3;
  double lc1 = sqrt(0.120790326*0.120790326 + 0.0000340612*0.0000340612);
  //double lc2 = sqrt(0.1193127722*0.1193127722 + 0.0000133339*0.0000133339); //no bar
  double lc2 = sqrt(0.1607810504*0.1607810504 + 0.0000910835*0.0000910835); // only bar
  //double lc2 = sqrt(0.2306695089*0.2306684095847 + 0.0000453592*0.0000453592); //add 10kg
  //double lc2 = sqrt(0.2538413381*0.2538413381 + 0.0000301991*0.0000301991); //add 20kg
  double Izz1 = 0.17425889349;
  //double Izz2 = 0.15006242579; //no bar
  double Izz2 = 0.20813323401; //only bar
  //double Izz2 = 0.39309231441; //add 10kg
  //double Izz2 = 0.51353221268; //add 20kg

  Amat(0,0) = m1*lc1*lc1 + Izz1 + m2*(l1*l1 + lc2*lc2 + 2*l1*lc2*cos(q(1)));
  Amat(0,1) = Izz2 + m2*(lc2*lc2 + l1*lc2*cos(q(1)));
  Amat(1,0) = Amat(0,1);
  Amat(1,1) = lc2*lc2*m2 + Izz2;

  return Amat;
}

MatrixXd ArmController::getC(Vector2d q, Vector2d qdot){
     double h = 2e-12;

     Vector2d q_new = q;
     MatrixXd C(dof, dof);
     MatrixXd C1(dof, dof);
     C1.setZero();
     MatrixXd C2(dof, dof);
     C2.setZero();
     MatrixXd H_origin(dof, dof), H_new(dof, dof);
     MatrixXd m[dof];
     double b[dof][dof][dof];
     H_origin = getA(q);//CompositeRigidBodyAlgorithm(*model, q, H_origin, true);

     for (int i = 0; i < dof; i++) {
        q_new = q;
        q_new(i) += h;
        H_new = getA(q_new);//CompositeRigidBodyAlgorithm(*model, q_new, H_new, true);
        m[i].resize(dof, dof);
        m[i] = (H_new - H_origin) / h;
     }

     for (int i = 0; i < dof; i++)
        for (int j = 0; j < dof; j++)
           for (int k = 0; k < dof; k++)
              b[i][j][k] = 0.5 * (m[k](i, j) + m[j](i, k) - m[i](j, k));

     C.setZero();
     for (int i = 0; i < dof; i++)
        for (int j = 0; j < dof; j++)
           C1(i, j) = b[i][j][j] * qdot(j);

     for (int k = 0; k< dof; k++)
        for (int j = 0; j<dof; j++)
           for (int i = 1+j; i< dof; i++)
              C2(k, j) += 2.0*b[k][j][i] * qdot(i);

     C = C1 + C2;

     return C;
}

MatrixXd ArmController::getC2(Vector2d q, Vector2d qdot){
     double h = 2e-12;

     Vector2d q_new = q;
     MatrixXd C(dof, dof);
     MatrixXd C1(dof, dof);
     C1.setZero();
     MatrixXd C2(dof, dof);
     C2.setZero();
     
     C(0,0) = -2*

     return C;
}

MatrixXd ArmController::getJ(Vector2d q){
  MatrixXd Jac;
  Jac.resize(2,2);
  Jac(0,0) = -0.3*sin(q(0))-0.3*sin(q(0)+q(1));
  Jac(0,1) = -0.3*sin(q(0)+q(1));
  Jac(1,0) = -0.3*cos(q(0))-0.3*cos(q(0)+q(1));
  Jac(1,1) = -0.3*cos(q(0)+q(1));

  return Jac;
}

double ArmController::lowpassfilter(double dT, double Wc, double X, double preY){
  double tau = 1.0/Wc;
  double y= tau/(tau+dT)*preY + dT/(tau+dT)*X;
  return y;
}

ArmController::ArmController(){
  A.resize(dof,dof);
  J.resize(dof,dof);
  C.resize(dof,dof);

  torque2D_.setZero();
  current2D_.setZero();
  torque2D_Gravity.setZero();
  torque2D_fric_est.setZero();
  torque2D_dist_est.setZero();
  momentum_est_.setZero();
  force_ext_est_.setZero();
  Lgain_ =100.0;

  q2Dddot_.setZero();

  q2Ddotext_.setZero();
  q2Dddotext_.setZero();

  q2D_pre.setZero();
  q2Ddot_pre.setZero();
  q2Dddot_pre.setZero();
  q2Dext_pre.setZero();
  q2Ddotext_pre.setZero();
  q2Dddotext_pre.setZero();

  q2Ddot_f.setZero();
  q2Ddot_f_pre.setZero();
  q2Dddot_f.setZero();
  q2Dddot_f_pre.setZero();

  q2Ddotext_f.setZero();
  q2Ddotext_f_pre.setZero();
  q2Dddotext_f.setZero();
  q2Dddotext_f_pre.setZero();

  q2D_desired_.setZero();
  q2Ddot_desired_.setZero();
  q2Dddot_desired_.setZero();
  q2D_init_.setZero();
  q2D_target.setZero();
  torque2D_desired_.setZero();

  errorcheck2D.setZero();

  B.resize(dof,dof);
  B.setZero();
  B(0,0) = 1.4497694;
  B(1,1) = 0.93038;

  Kp = 3600.0;//high 3600 low 100
  Kv = 120.0;//high 120 low 20
};

ArmController::~ArmController(){
};
